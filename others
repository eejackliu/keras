播放器mplayer
首先下载源码，在configure的时候选择--enable-gui --enable-alsa 如果报错没有alsa/asoundlib.h: No such file or directory则需要apt-get install libasound2-dev
之后就有能找到alsa的头文件目录但是在install的时候有可能还有错，所以去掉--enable-alsa可以成功。记得sudo ldconfig
import numpy as np

tmp = open("hw3_train.dat")
tmp = tmp.readlines()
train = [[float(j) for j in i.strip().split()] for i in tmp]
tmp = open("hw3_test.dat")
tmp = tmp.readlines()
test = [[float(j) for j in i.strip().split()] for i in tmp]
train = np.array(train)
test = np.array(test)

# class Tree:
#     def __init__(self):
#         pass
#     def insetless(self,data,col):
#         t=Node(col,data)
#         parent=self.serchnode(self.__root,self.__root,col,data)
#         if parent.__data[parent.__col]<data[parent.__col]:
#             parent.__more=t
#         else:
#             parent.__less=t
#     def serchnode(self,parent,t,col,data):
#         if t is None:
#             return False, parent
#         if t.__data[t.__col]<data[t.__col]:
#             return self.serchnode(t,t.__more,col,data)
#         else:
#             return self.serchnode(t,t.__less,col,data)
def gini(dat):
    gi = []
    length = len(dat)
    if length==1:
        return 1
    length = float(length)
    for i in range(1,int(length)):
        part_a = dat[:i]
        part_b = dat[i:]
        p1 = np.sum((part_a == 1.0)) / float(len(part_a))
        p2 = np.sum((part_b == 1.0)) / float(len(part_b))
        gi.append(len(part_a) / length * 2 * p1 * (1 - p1) + len(part_b) / length * 2 * p2 * (1 - p2))
    gi=np.array(gi)
    return np.argmin(gi)+1,gi.min()
def stump(data,col,p):
    s=1.0
    data=data[np.argsort(data[:, col])]
    if np.sum((data[p:,2]==1.0))<np.sum((data[p:,2]==-1.0)):
        s=-1.0
    theta=(data[p-1,col]+data[p,col])/2.0

    return [s,theta]
class Node:
    def __init__(self,col,element):# element data struct [a,b] afor threshold b is the s for decision stump
        self.__data=element
        self.__col=col
        self.__less=None
        self.__more=None
    def getnode(self):
        return self.__col,self.__data
    def getless(self):
        return self.__less
    def getmore(self):
        return self.__more
    def setmore(self,tmp):
        self.__more=tmp
    def setless(self,tmp):
        self.__less=tmp
def cart(data):
    p0,n0=gini(data[np.argsort(data[:,0])][:,2])
    p1,n1=gini(data[np.argsort(data[:,1])][:,2])
    # print p0,p1,n0,n1
    # if n1==n0==0:# n1,n0 will be 0 at same time
    #     return None
    if n0<n1:
        s,thread=stump(data,0,p0)
        root=Node(0,[thread,s])
        if n0*n1==0:                            # feature0 or feature1 can split the data,there is no need to generate another root
            return root
        if len(data[0:p0])==1 or len(data[p0:])==1: # even though the gini is not 0, one element can't be split into two part , information
                                                # in root is how to split .
            return root
        # if gini(data[np.argsort(data[:,0])][p0:])!=0:
        if np.abs(np.sum(data[np.argsort(data[:,0])][p0:][:,2]))!=len(data[p0:]):
            root.setmore(cart(data[np.argsort(data[:,0])][p0:]))
        if np.abs(np.sum(data[np.argsort(data[:,0])][:p0][:,2]))!=len(data[:p0]):
            root.setless(cart(data[np.argsort(data[:,0])][:p0]))
        return root
    else:
        s, thread = stump(data, 1, p1)
        root = Node(1, [thread,s])
        if n0*n1==0:
            return root
        if len(data[0:p1])==1 or len(data[p1:])==1:
            return root
        if np.abs(np.sum(data[np.argsort(data[:,1])][p1:][:,2]))!=len(data[p1:]):
            root.setmore(cart(data[np.argsort(data[:,1])][p1:]))
        if np.abs(np.sum(data[np.argsort(data[:,1])][:p1][:,2]))!=len(data[:p1]):
            root.setless(cart(data[np.argsort(data[:,1])][:p1]))
        return root
    return root
def mid_tree(tmp,a):
    if tmp==None:
        return

    mid_tree(tmp.getless(),a)

    a.append(tmp.getnode())
    print tmp.getnode()
    mid_tree(tmp.getmore(),a)
a=[]
root=cart(train)
mid_tree(root,a)
print len(a)
def test_out(root,data):
    col,threshold=root.getnode()
    if threshold[0]<data[col]:
        if root.getmore()==None:
            return threshold[1]*np.sign(data[col]-threshold[0])
        return test_out(root.getmore(),data)
    else:
        if root.getless()==None:
            return threshold[1]*np.sign(data[col]-threshold[0])
        return test_out(root.getless(),data)
b=test[5]
out=[]
for i in test:
    out.append(test_out(root,i)==i[2])
    # print i,test_out(root,i )
out=np.array(out)
# print test[out==False]
# # print test_out(root,train[out==False][0])
# print np.sum(out)


#[0.651344 0.290269 1.      ]
